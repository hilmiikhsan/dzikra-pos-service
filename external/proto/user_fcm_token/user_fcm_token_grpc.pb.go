// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: user_fcm_token.proto

package user_fcm_token

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFcmTokenClient is the client API for UserFcmToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFcmTokenClient interface {
	GetUserFcmTokenByUserID(ctx context.Context, in *GetUserFcmTokenByUserIDRequest, opts ...grpc.CallOption) (*GetUserFcmTokenByUserIDResponse, error)
}

type userFcmTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFcmTokenClient(cc grpc.ClientConnInterface) UserFcmTokenClient {
	return &userFcmTokenClient{cc}
}

func (c *userFcmTokenClient) GetUserFcmTokenByUserID(ctx context.Context, in *GetUserFcmTokenByUserIDRequest, opts ...grpc.CallOption) (*GetUserFcmTokenByUserIDResponse, error) {
	out := new(GetUserFcmTokenByUserIDResponse)
	err := c.cc.Invoke(ctx, "/user_fcm_token.UserFcmToken/GetUserFcmTokenByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFcmTokenServer is the server API for UserFcmToken service.
// All implementations must embed UnimplementedUserFcmTokenServer
// for forward compatibility
type UserFcmTokenServer interface {
	GetUserFcmTokenByUserID(context.Context, *GetUserFcmTokenByUserIDRequest) (*GetUserFcmTokenByUserIDResponse, error)
	mustEmbedUnimplementedUserFcmTokenServer()
}

// UnimplementedUserFcmTokenServer must be embedded to have forward compatible implementations.
type UnimplementedUserFcmTokenServer struct {
}

func (UnimplementedUserFcmTokenServer) GetUserFcmTokenByUserID(context.Context, *GetUserFcmTokenByUserIDRequest) (*GetUserFcmTokenByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFcmTokenByUserID not implemented")
}
func (UnimplementedUserFcmTokenServer) mustEmbedUnimplementedUserFcmTokenServer() {}

// UnsafeUserFcmTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFcmTokenServer will
// result in compilation errors.
type UnsafeUserFcmTokenServer interface {
	mustEmbedUnimplementedUserFcmTokenServer()
}

func RegisterUserFcmTokenServer(s grpc.ServiceRegistrar, srv UserFcmTokenServer) {
	s.RegisterService(&UserFcmToken_ServiceDesc, srv)
}

func _UserFcmToken_GetUserFcmTokenByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFcmTokenByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFcmTokenServer).GetUserFcmTokenByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_fcm_token.UserFcmToken/GetUserFcmTokenByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFcmTokenServer).GetUserFcmTokenByUserID(ctx, req.(*GetUserFcmTokenByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFcmToken_ServiceDesc is the grpc.ServiceDesc for UserFcmToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFcmToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_fcm_token.UserFcmToken",
	HandlerType: (*UserFcmTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserFcmTokenByUserID",
			Handler:    _UserFcmToken_GetUserFcmTokenByUserID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_fcm_token.proto",
}
