// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentCallbackServiceClient is the client API for PaymentCallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentCallbackServiceClient interface {
	// payment callback using a template
	PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error)
}

type paymentCallbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentCallbackServiceClient(cc grpc.ClientConnInterface) PaymentCallbackServiceClient {
	return &paymentCallbackServiceClient{cc}
}

func (c *paymentCallbackServiceClient) PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error) {
	out := new(PaymentCallbackResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentCallbackService/PaymentCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentCallbackServiceServer is the server API for PaymentCallbackService service.
// All implementations must embed UnimplementedPaymentCallbackServiceServer
// for forward compatibility
type PaymentCallbackServiceServer interface {
	// payment callback using a template
	PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error)
	mustEmbedUnimplementedPaymentCallbackServiceServer()
}

// UnimplementedPaymentCallbackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentCallbackServiceServer struct {
}

func (UnimplementedPaymentCallbackServiceServer) PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentCallback not implemented")
}
func (UnimplementedPaymentCallbackServiceServer) mustEmbedUnimplementedPaymentCallbackServiceServer() {
}

// UnsafePaymentCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentCallbackServiceServer will
// result in compilation errors.
type UnsafePaymentCallbackServiceServer interface {
	mustEmbedUnimplementedPaymentCallbackServiceServer()
}

func RegisterPaymentCallbackServiceServer(s grpc.ServiceRegistrar, srv PaymentCallbackServiceServer) {
	s.RegisterService(&PaymentCallbackService_ServiceDesc, srv)
}

func _PaymentCallbackService_PaymentCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentCallbackServiceServer).PaymentCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentCallbackService/PaymentCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentCallbackServiceServer).PaymentCallback(ctx, req.(*PaymentCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentCallbackService_ServiceDesc is the grpc.ServiceDesc for PaymentCallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentCallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentCallbackService",
	HandlerType: (*PaymentCallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaymentCallback",
			Handler:    _PaymentCallbackService_PaymentCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
